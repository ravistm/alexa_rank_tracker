continue
current_user.domains.count
continue
raw @my_hash.to_json
@my_hash.to_json
@my_hash
continue
@my_hash
continue
@my_hash
continue
raw(a.to_json)
continue
a.to_json.html_safe
a.to_json
continue
a.push(puts a.to_json)
a = []
[a,b,c].map(p &:to_json)
puts a.to_json
p [a,b,c].map(&:to_json)
p "a"
continue
a.class
raw a.to_json
a.to_json
continue
a.to_json
continue
require 'json'
continue
@domain_data.domains.select(:name).map(&:name)
@domain_data = @domains
@domain_data = @domain
@domains.domains.select(:name)
@domains.domains
@domains
@domain.domains
@domains = User.includes(domains: [:ranks]).find(current_user.id)
User.includes(domains: [:ranks]).find(current_user.id)
User.includes(domains: [:ranks]).find(current_user.id).explain
Domain.includes(:rank).limit(10).explain
User.where(id: current_user.id).includes(:domains).explain
@domains.each {|domain| domain.ranks.select(:rank).map(&:rank) }
@domains.each {|domain| domain.ranks}
@domains.each do |domain|
domain_names
continue
@domains.first.ranks.first.rank
@domains.first.ranks.rank
@domains.first.ranks
@domains
continue
@domain
continue
a.first.ranks.first.rank
a.first.ranks
a.first.ranks.rank
a.first.rank
a = current_user.domains
current_user.domains.ranks
current_user.domains
current_user.includes(:domains)
current_user
continue
@domain
continue
current_user.daily_ranks.count
quota_reached?
continue
!@rank_history.empty?
@rank_history.empty?
@rank_history
continue
self.user.daily_ranks(:reload).count
continue
self.user.daily_ranks.count
self.user.daily_ranks
self.user.daily_ranks(:reload)
self.user.daily_ranks.count
self.user.daily_ranks
self.user
current_user
continue
current_user.daily_ranks.count < 3 ? "a" : "b"
current_user.daily_ranks.count == 3 ? "a":"b"
(current_user.daily_ranks.count == 3)? ? p 'a' : p 'b'
(current_user.daily_ranks.count == 3)? p 'a' : p 'b'
(current_user.daily_ranks.count == 3)
(current_user.daily_ranks.count == 3)?
(current_user.daily_ranks.count < 3)?
current_user.daily_ranks.count < 3 ?
current_user.daily_ranks.count
current_user.daily_ranks.count < 3?
continue
self.user.daily_ranks(:reload).count
self.user
continue
current_user.daily_ranks.count
current_user
continue
@rank
continue
y_axis_data
x_axis_data
continue
client.url_info(url: "example.com")
continue
'
ENV['AWS_id]
continue
ENV['AWIS_KEY_ID']
ENV
ENV['AWS_ID']
continue
ENV['AWS_KEY']
ENV['AWS_ID']
ENV[AWS_ID]
continue
@rank
continue
@rank
continue
@rank
continue
@rank
continue
@rank
continue
doc.elements.each('ALEXA/SD/POPULARITY'){ |e| p e.attributes["TEXT"].to_s }
doc.elements.each('ALEXA/SD/POPULARITY'){
doc.elements.each('ALEXA/SD/POPULARITY') do |ele| 
doc.elements.each('ALEXA/SD/POPULARITY') do |ele|
doc.elements.first
doc.elements
doc = REXML::Document.new(xml_data)
xml_data
xml_data.elements
oc
oc = REXML::Document.new(xml_data)
xml_data
continue
params[:rank][:given_url]
params
params[:given_url]
